#include <iostream>
#include <unistd.h>
#include <sys/wait.h>
#include <semaphore.h>

using namespace std;

sem_t semaphore1, semaphore2, semaphore3; // Three semaphores for process synchronization

void printCharacter(char character, int processNumber, int printCount) {
    // cout << "Process " << processNumber << " is printing ";
    for (int i = 0; i < printCount; ++i) {
        cout << character;
        cout.flush();
        usleep(100000);
    }
    cout << endl;
}

int main() {
    pid_t pid;
    int status;

    sem_init(&semaphore1, 0, 0); // Initialize semaphore 1
    sem_init(&semaphore2, 0, 0); // Initialize semaphore 2
    sem_init(&semaphore3, 0, 0); // Initialize semaphore 3

    for (int i = 0; i < 4; ++i) {
        cout << "Creating process " << i + 1 << "..." << endl;
        pid = fork(); // Create a new process
        
        if (pid < 0) { // If process creation fails
            cerr << "Failed to create process." << endl;
            return 1;
        } else if (pid == 0) { // If we are in the child process
            switch (i) {
                case 0: // First process
                    for (int j = 0; j < 60; j += 4) {
                        printCharacter('*', i + 1, 4);
                        usleep(100000);
                    }
                    sem_post(&semaphore1); // Release semaphore 1 after printing
                    break;
                case 1: // Second process
                    // sem_wait(&semaphore1); // Wait for the first process to finish
                    for (int j = 0; j < 40; j += 4) {
                        printCharacter('#', i + 1, 4);
                        usleep(100000);
                    }
                    sem_post(&semaphore2); // Release semaphore 2 after printing
                    break;
                case 2: // Third process
                    // sem_wait(&semaphore2); // Wait for the second process to finish
                    for (int j = 0; j < 10; j += 4) {
                        printCharacter('$', i + 1, 4);
                        usleep(100000);
                    }
                    sem_post(&semaphore3); // Release semaphore 3 after printing
                    break;
                case 3: // Fourth process
                    // sem_wait(&semaphore3); // Wait for the third process to finish
                    for (int j = 0; j < 30; j += 4) {
                        printCharacter('@', i + 1, 4);
                        usleep(100000);
                    }
                    break;
            }
            exit(0); // Exit from the child process
        }
    }

    // Parent waits for all processes to finish
    for (int i = 0; i < 4; ++i) {
        waitpid(-1, &status, 0);
    }

    sem_destroy(&semaphore1); // Destroy semaphore 1 after use
    sem_destroy(&semaphore2); // Destroy semaphore 2 after use
    sem_destroy(&semaphore3); // Destroy semaphore 3 after use

    cout << "Parent process is terminating." << endl;

    return 0;
}
